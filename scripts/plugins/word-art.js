/* prettier-ignore */
const digit = {
  "0": ["𝟢", "𝟶", "𝟎", "𝟘", "０", "⓪", "⓿", "🄁", "🄀", "⁰", "₀"],
  "1": ["𝟣", "𝟷", "𝟏", "𝟙", "１", "①", "❶", "🄂", "⒈", "¹", "₁"],
  "2": ["𝟤", "𝟸", "𝟐", "𝟚", "２", "②", "❷", "🄃", "⒉", "²", "₂"],
  "3": ["𝟥", "𝟹", "𝟑", "𝟛", "３", "③", "❸", "🄄", "⒊", "³", "₃"],
  "4": ["𝟦", "𝟺", "𝟒", "𝟜", "４", "④", "❹", "🄅", "⒋", "⁴", "₄"],
  "5": ["𝟧", "𝟻", "𝟓", "𝟝", "５", "⑤", "❺", "🄆", "⒌", "⁵", "₅"],
  "6": ["𝟨", "𝟼", "𝟔", "𝟞", "６", "⑥", "❻", "🄇", "⒍", "⁶", "₆"],
  "7": ["𝟩", "𝟽", "𝟕", "𝟟", "７", "⑦", "❼", "🄈", "⒎", "⁷", "₇"],
  "8": ["𝟪", "𝟾", "𝟖", "𝟠", "８", "⑧", "❽", "🄉", "⒏", "⁸", "₈"],
  "9": ["𝟫", "𝟿", "𝟗", "𝟡", "９", "⑨", "❾", "🄊", "⒐", "⁹", "₉"]
};

/* prettier-ignore */
const letter = {
  a: ["𝖺", "𝚊", "𝐚", "𝕒", "ａ", "ⓐ", "🅐", "𝓪", "𝔞", "𝖆", "𝙖", "𝗮", "𝒂", "ᴀ", "🅰", "🄰"],
  b: ["𝖻", "𝚋", "𝐛", "𝕓", "ｂ", "ⓑ", "🅑", "𝓫", "𝔟", "𝖇", "𝙗", "𝗯", "𝒃", "ʙ", "🅱", "🄱"],
  c: ["𝖼", "𝚌", "𝐜", "𝕔", "ｃ", "ⓒ", "🅒", "𝓬", "𝔠", "𝖈", "𝙘", "𝗰", "𝒄", "ᴄ", "🅲", "🄲"],
  d: ["𝖽", "𝚍", "𝐝", "𝕕", "ｄ", "ⓓ", "🅓", "𝓭", "𝔡", "𝖉", "𝙙", "𝗱", "𝒅", "ᴅ", "🅳", "🄳"],
  e: ["𝖾", "𝚎", "𝐞", "𝕖", "ｅ", "ⓔ", "🅔", "𝓮", "𝔢", "𝖊", "𝙚", "𝗲", "𝒆", "ᴇ", "🅴", "🄴"],
  f: ["𝖿", "𝚏", "𝐟", "𝕗", "ｆ", "ⓕ", "🅕", "𝓯", "𝔣", "𝖋", "𝙛", "𝗳", "𝒇", "ꜰ", "🅵", "🄵"],
  g: ["𝗀", "𝚐", "𝐠", "𝕘", "ｇ", "ⓖ", "🅖", "𝓰", "𝔤", "𝖌", "𝙜", "𝗴", "𝒈", "ɢ", "🅶", "🄶"],
  h: ["𝗁", "𝚑", "𝐡", "𝕙", "ｈ", "ⓗ", "🅗", "𝓱", "𝔥", "𝖍", "𝙝", "𝗵", "𝒉", "ʜ", "🅷", "🄷"],
  i: ["𝗂", "𝚒", "𝐢", "𝕚", "ｉ", "ⓘ", "🅘", "𝓲", "𝔦", "𝖎", "𝙞", "𝗶", "𝒊", "ɪ", "🅸", "🄸"],
  j: ["𝗃", "𝚓", "𝐣", "𝕛", "ｊ", "ⓙ", "🅙", "𝓳", "𝔧", "𝖏", "𝙟", "𝗷", "𝒋", "ᴊ", "🅹", "🄹"],
  k: ["𝗄", "𝚔", "𝐤", "𝕜", "ｋ", "ⓚ", "🅚", "𝓴", "𝔨", "𝖐", "𝙠", "𝗸", "𝒌", "ᴋ", "🅺", "🄺"],
  l: ["𝗅", "𝚕", "𝐥", "𝕝", "ｌ", "ⓛ", "🅛", "𝓵", "𝔩", "𝖑", "𝙡", "𝗹", "𝒍", "ʟ", "🅻", "🄻"],
  m: ["𝗆", "𝚖", "𝐦", "𝕞", "ｍ", "ⓜ", "🅜", "𝓶", "𝔪", "𝖒", "𝙢", "𝗺", "𝒎", "ᴍ", "🅼", "🄼"],
  n: ["𝗇", "𝚗", "𝐧", "𝕟", "ｎ", "ⓝ", "🅝", "𝓷", "𝔫", "𝖓", "𝙣", "𝗻", "𝒏", "ɴ", "🅽", "🄽"],
  o: ["𝗈", "𝚘", "𝐨", "𝕠", "ｏ", "ⓞ", "🅞", "𝓸", "𝔬", "𝖔", "𝙤", "𝗼", "𝒐", "ᴏ", "🅾", "🄾"],
  p: ["𝗉", "𝚙", "𝐩", "𝕡", "ｐ", "ⓟ", "🅟", "𝓹", "𝔭", "𝖕", "𝙥", "𝗽", "𝒑", "ᴘ", "🅿", "🄿"],
  q: ["𝗊", "𝚚", "𝐪", "𝕢", "ｑ", "ⓠ", "🅠", "𝓺", "𝔮", "𝖖", "𝙦", "𝗾", "𝒒", "ǫ", "🆀", "🅀"],
  r: ["𝗋", "𝚛", "𝐫", "𝕣", "ｒ", "ⓡ", "🅡", "𝓻", "𝔯", "𝖗", "𝙧", "𝗿", "𝒓", "ʀ", "🆁", "🅁"],
  s: ["𝗌", "𝚜", "𝐬", "𝕤", "ｓ", "ⓢ", "🅢", "𝓼", "𝔰", "𝖘", "𝙨", "𝘀", "𝒔", "s", "🆂", "🅂"],
  t: ["𝗍", "𝚝", "𝐭", "𝕥", "ｔ", "ⓣ", "🅣", "𝓽", "𝔱", "𝖙", "𝙩", "𝘁", "𝒕", "ᴛ", "🆃", "🅃"],
  u: ["𝗎", "𝚞", "𝐮", "𝕦", "ｕ", "ⓤ", "🅤", "𝓾", "𝔲", "𝖚", "𝙪", "𝘂", "𝒖", "ᴜ", "🆄", "🅄"],
  v: ["𝗏", "𝚟", "𝐯", "𝕧", "ｖ", "ⓥ", "🅥", "𝓿", "𝔳", "𝖛", "𝙫", "𝘃", "𝒗", "ᴠ", "🆅", "🅅"],
  w: ["𝗐", "𝚠", "𝐰", "𝕨", "ｗ", "ⓦ", "🅦", "𝔀", "𝔴", "𝖜", "𝙬", "𝘄", "𝒘", "ᴡ", "🆆", "🅆"],
  x: ["𝗑", "𝚡", "𝐱", "𝕩", "ｘ", "ⓧ", "🅧", "𝔁", "𝔵", "𝖝", "𝙭", "𝘅", "𝒙", "x", "🆇", "🅇"],
  y: ["𝗒", "𝚢", "𝐲", "𝕪", "ｙ", "ⓨ", "🅨", "𝔂", "𝔶", "𝖞", "𝙮", "𝘆", "𝒚", "ʏ", "🆈", "🅈"],
  z: ["𝗓", "𝚣", "𝐳", "𝕫", "ｚ", "ⓩ", "🅩", "𝔃", "𝔷", "𝖟", "𝙯", "𝘇", "𝒛", "ᴢ", "🆉", "🅉"],
  A: ["𝖠", "𝙰", "𝐀", "𝔸", "Ａ", "Ⓐ", "🅐", "𝓐", "𝔄", "𝕬", "𝘼", "𝗔", "𝑨", "A", "🅰", "🄰"],
  B: ["𝖡", "𝙱", "𝐁", "𝔹", "Ｂ", "Ⓑ", "🅑", "𝓑", "𝔅", "𝕭", "𝘽", "𝗕", "𝑩", "B", "🅱", "🄱"],
  C: ["𝖢", "𝙲", "𝐂", "ℂ", "Ｃ", "Ⓒ", "🅒", "𝓒", "ℭ", "𝕮", "𝘾", "𝗖", "𝑪", "C", "🅲", "🄲"],
  D: ["𝖣", "𝙳", "𝐃", "𝔻", "Ｄ", "Ⓓ", "🅓", "𝓓", "𝔇", "𝕯", "𝘿", "𝗗", "𝑫", "D", "🅳", "🄳"],
  E: ["𝖤", "𝙴", "𝐄", "𝔼", "Ｅ", "Ⓔ", "🅔", "𝓔", "𝔈", "𝕰", "𝙀", "𝗘", "𝑬", "E", "🅴", "🄴"],
  F: ["𝖥", "𝙵", "𝐅", "𝔽", "Ｆ", "Ⓕ", "🅕", "𝓕", "𝔉", "𝕱", "𝙁", "𝗙", "𝑭", "F", "🅵", "🄵"],
  G: ["𝖦", "𝙶", "𝐆", "𝔾", "Ｇ", "Ⓖ", "🅖", "𝓖", "𝔊", "𝕲", "𝙂", "𝗚", "𝑮", "G", "🅶", "🄶"],
  H: ["𝖧", "𝙷", "𝐇", "ℍ", "Ｈ", "Ⓗ", "🅗", "𝓗", "ℌ", "𝕳", "𝙃", "𝗛", "𝑯", "H", "🅷", "🄷"],
  I: ["𝖨", "𝙸", "𝐈", "𝕀", "Ｉ", "Ⓘ", "🅘", "𝓘", "ℑ", "𝕴", "𝙄", "𝗜", "𝑰", "I", "🅸", "🄸"],
  J: ["𝖩", "𝙹", "𝐉", "𝕁", "Ｊ", "Ⓙ", "🅙", "𝓙", "𝔍", "𝕵", "𝙅", "𝗝", "𝑱", "J", "🅹", "🄹"],
  K: ["𝖪", "𝙺", "𝐊", "𝕂", "Ｋ", "Ⓚ", "🅚", "𝓚", "𝔎", "𝕶", "𝙆", "𝗞", "𝑲", "K", "🅺", "🄺"],
  L: ["𝖫", "𝙻", "𝐋", "𝕃", "Ｌ", "Ⓛ", "🅛", "𝓛", "𝔏", "𝕷", "𝙇", "𝗟", "𝑳", "L", "🅻", "🄻"],
  M: ["𝖬", "𝙼", "𝐌", "𝕄", "Ｍ", "Ⓜ", "🅜", "𝓜", "𝔐", "𝕸", "𝙈", "𝗠", "𝑴", "M", "🅼", "🄼"],
  N: ["𝖭", "𝙽", "𝐍", "ℕ", "Ｎ", "Ⓝ", "🅝", "𝓝", "𝔑", "𝕹", "𝙉", "𝗡", "𝑵", "N", "🅽", "🄽"],
  O: ["𝖮", "𝙾", "𝐎", "𝕆", "Ｏ", "Ⓞ", "🅞", "𝓞", "𝔒", "𝕺", "𝙊", "𝗢", "𝑶", "O", "🅾", "🄾"],
  P: ["𝖯", "𝙿", "𝐏", "ℙ", "Ｐ", "Ⓟ", "🅟", "𝓟", "𝔓", "𝕻", "𝙋", "𝗣", "𝑷", "P", "🅿", "🄿"],
  Q: ["𝖰", "𝚀", "𝐐", "ℚ", "Ｑ", "Ⓠ", "🅠", "𝓠", "𝔔", "𝕼", "𝙌", "𝗤", "𝑸", "Q", "🆀", "🅀"],
  R: ["𝖱", "𝚁", "𝐑", "ℝ", "Ｒ", "Ⓡ", "🅡", "𝓡", "ℜ", "𝕽", "𝙍", "𝗥", "𝑹", "R", "🆁", "🅁"],
  S: ["𝖲", "𝚂", "𝐒", "𝕊", "Ｓ", "Ⓢ", "🅢", "𝓢", "𝔖", "𝕾", "𝙎", "𝗦", "𝑺", "S", "🆂", "🅂"],
  T: ["𝖳", "𝚃", "𝐓", "𝕋", "Ｔ", "Ⓣ", "🅣", "𝓣", "𝔗", "𝕿", "𝙏", "𝗧", "𝑻", "T", "🆃", "🅃"],
  U: ["𝖴", "𝚄", "𝐔", "𝕌", "Ｕ", "Ⓤ", "🅤", "𝓤", "𝔘", "𝖀", "𝙐", "𝗨", "𝑼", "U", "🆄", "🅄"],
  V: ["𝖵", "𝚅", "𝐕", "𝕍", "Ｖ", "Ⓥ", "🅥", "𝓥", "𝔙", "𝖁", "𝙑", "𝗩", "𝑽", "V", "🆅", "🅅"],
  W: ["𝖶", "𝚆", "𝐖", "𝕎", "Ｗ", "Ⓦ", "🅦", "𝓦", "𝔚", "𝖂", "𝙒", "𝗪", "𝑾", "W", "🆆", "🅆"],
  X: ["𝖷", "𝚇", "𝐗", "𝕏", "Ｘ", "Ⓧ", "🅧", "𝓧", "𝔛", "𝖃", "𝙓", "𝗫", "𝑿", "X", "🆇", "🅇"],
  Y: ["𝖸", "𝚈", "𝐘", "𝕐", "Ｙ", "Ⓨ", "🅨", "𝓨", "𝔜", "𝖄", "𝙔", "𝗬", "𝒀", "Y", "🆈", "🅈"],
  Z: ["𝖹", "𝚉", "𝐙", "ℤ", "Ｚ", "Ⓩ", "🅩", "𝓩", "ℨ", "𝖅", "𝙕", "𝗭", "𝒁", "Z", "🆉", "🅉"]
}

exports.start = text => {
  /* prettier-ignore */
  const menu1 = ["𝖠𝖻𝖼", "𝙰𝚋𝚌", "𝐀𝐛𝐜", "𝔸𝕓𝕔", "Ａｂｃ", "Ⓐⓑⓒ", "🅐🅑🅒", "𝓐𝓫𝓬", "𝔄𝔟𝔠", "𝕬𝖇𝖈", "𝘼𝙗𝙘", "𝗔𝗯𝗰", "𝑨𝒃𝒄", "Aʙᴄ", "🅰🅱🅲", "🄰🄱🄲"];
  /* prettier-ignore */
  const menu2 = ["𝟣𝟤𝟥", "𝟷𝟸𝟹", "𝟏𝟐𝟑", "𝟙𝟚𝟛", "１２３", "①②③", "❶❷❸", "🄂🄃🄄", "⒈⒉⒊", "¹²³", "₁₂₃"];
  const digitMenu = x =>
    $delay(0, () => {
      $ui.menu(menu2).then(res => {
        if ("index" in res) convert(text, x, res.index);
      });
    });
  $ui.menu(["仅数字", "仅字母", "同时转换", "恢复正常字符"]).then(resp => {
    if ("index" in resp) {
      let idx = resp.index;
      if (idx == 0) digitMenu(undefined);
      else if (idx == 3) recover(text);
      else
        $delay(0, () =>
          $ui.menu(menu1).then(res => {
            if ("index" in res) {
              if (idx == 2) {
                if (res.index < 7) convert(text, res.index, res.index);
                else digitMenu(res.index);
              } else convert(text, res.index);
            }
          })
        );
    }
  });
};

const convert = (text, α = undefined, β = undefined) => {
  let x = "";
  for (let i of text) {
    if (/[a-zA-Z]/.test(i) && α !== undefined) x += letter[i][α];
    else if (/\d/.test(i) && β !== undefined) x += digit[i][β];
    else x += i;
  }
  add2Clip(x);
};

const recover = text => {
  let x = "";
  for (let i of text) {
    let isMatched;
    for (let j in digit) {
      if (digit[j].includes(i)) {
        x += j;
        isMatched = true;
        break;
      }
    }
    if (isMatched) continue;
    for (let k in letter) {
      if (letter[k].includes(i)) {
        x += k;
        isMatched = true;
        break;
      }
    }
    if (isMatched) continue;
    else x += i;
  }
  add2Clip(x);
};

function add2Clip(result) {
  let dataManager = require("../data-manager"),
    ui = require("../ui");
  dataManager.addTextItems(result);
  ui.toast({ text: "Done" });
}
